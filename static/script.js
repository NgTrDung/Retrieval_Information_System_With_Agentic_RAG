// H√†m thao t√°c v·ªõi sidebar
function toggleSidebar() {
    const $sidebar = $('.sidebar');
    const $toggleButton = $('.toggle-button');
    const $newChat = $('#new-chat');
    if ($sidebar.hasClass('sidebar-collapsed')) {
        $sidebar.removeClass('sidebar-collapsed');
        $('.sidebar-content').show();
        $toggleButton.attr('title', 'Close Sidebar');
        $newChat.attr('title', 'New Chat');
    } else {
        $sidebar.addClass('sidebar-collapsed');
        $('.sidebar-content').hide();
        $toggleButton.attr('title', 'Open Sidebar');
        $newChat.removeAttr('title');
    }
}

// ƒê·∫∑t title ƒë√∫ng tr·∫°ng th√°i khi load trang
$(document).ready(function() {
    const $sidebar = $('.sidebar');
    const $toggleButton = $('.toggle-button');
    const $newChat = $('#new-chat');
    if ($sidebar.hasClass('sidebar-collapsed')) {
        $toggleButton.attr('title', 'Open Sidebar');
        $newChat.removeAttr('title');
    } else {
        $toggleButton.attr('title', 'Close Sidebar');
        $newChat.attr('title', 'New Chat');
    }
    updateSearchWebButtonState();
});

const $userInput = $('#user-query');
const $sendButton = $('#send-button');
let isLoading = false; // Tr·∫°ng th√°i khi chatbot ƒëang x·ª≠ l√Ω ph·∫£n h·ªìi
let isTyping = false;  // Tr·∫°ng th√°i khi chatbot ƒëang in t·ª´ng t·ª´ c·ªßa c√¢u tr·∫£ l·ªùi

// Ki·ªÉm tra n·ªôi dung c·ªßa input-area ƒë·ªÉ b·∫≠t/t·∫Øt n√∫t Send
$userInput.on('input', function() {
    updateSendButtonState(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t Send khi ng∆∞·ªùi d√πng nh·∫≠p li·ªáu
});

function updateSendButtonState() {
    // Ch·ªâ k√≠ch ho·∫°t n√∫t Send n·∫øu c√≥ k√Ω t·ª± trong input, chatbot kh√¥ng ƒëang g√µ v√† kh√¥ng ƒëang ch·ªù ph·∫£n h·ªìi
    if ($userInput.val().trim() !== "" && !isTyping && !isLoading) {
        $sendButton.addClass('active').removeClass('disabled').prop('disabled', false);
    } else {
        $sendButton.removeClass('active').addClass('disabled').prop('disabled', true);
    }
}

// Logic event khi user click button Send
$('#send-button').on('click', sendMessage);

// Logic event khi user ·∫•n n√∫t Enter thay th√¨ button Send
$('#user-query').on('keydown', function(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        sendMessage();
    }
});

// Th√™m bi·∫øn tr·∫°ng th√°i ch·∫ø ƒë·ªô Search Web
let isSearchWebMode = false;

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t Search Web
function updateSearchWebButtonState() {
    if (currentSessionId) {
        $('#toggle-search-web').prop('disabled', false).removeClass('disabled');
    } else {
        $('#toggle-search-web').prop('disabled', true).addClass('disabled');
    }
}

// X·ª≠ l√Ω s·ª± ki·ªán click cho n√∫t Search Web
$('#toggle-search-web').on('click', function() {
    if ($(this).prop('disabled')) return;
    console.log('ƒê√£ click Search Web!');
    isSearchWebMode = !isSearchWebMode;
    $(this).toggleClass('active', isSearchWebMode);
    if (isSearchWebMode) {
        $(this).find('span').text('üåê Search');
        $('#user-query').attr('placeholder', 'Tr·∫£ l·ªùi d√πng Search Tool ...');
    } else {
        $(this).find('span').text('Chat');
        $('#user-query').attr('placeholder', 'Nh·∫≠p tin nh·∫Øn ...');
    }
});

const OUT_OF_SCOPE_MESSAGE = "Xin l·ªói b·∫°n. Ki·∫øn th·ª©c n√†y n·∫±m ngo√†i ph·∫°m vi hi·ªÉu bi·∫øt c·ªßa t√¥i. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i m·ªôt c√¢u h·ªèi kh√°c kh√¥ng? T√¥i s·∫Ω c·ªë g·∫Øng gi·∫£i ƒë√°p c√¢u h·ªèi c·ªßa b·∫°n!";

// H√†m g·ª≠i tin nh·∫Øn t·ª´ user
function sendMessage() {
    const query = $userInput.val().trim();
    if (!query || isLoading || isTyping) return;

    // X√≥a n·ªôi dung c·ªßa relevant-documents-container
    $('#relevant-documents-container').empty();

    $sendButton.prop('disabled', true).removeClass('active').addClass('disabled');
    isLoading = true;
    $('#loading-indicator').text("Loading...");

    const $chatOutput = $('#chat-output');
    $chatOutput.append(`
        <div class="chat-message user">
            <div class="avatar user-avatar" style="background-image: url('https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=');"></div>
            <div class="message">${query}</div>
        </div>
    `);

    // L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o database
    saveMessage(currentSessionId, 'user', query);

    // Ki·ªÉm tra v√† th√™m phi√™n chat v√†o sidebar n·∫øu l√† tin nh·∫Øn ƒë·∫ßu ti√™n
    if ($('#chat-sessions .chat-session[data-session-id="' + currentSessionId + '"]').length === 0) {
        addChatSessionToSidebar(currentSessionId, query);
    }

    $userInput.val('');
    $chatOutput.scrollTop($chatOutput.prop('scrollHeight'));

    const $typingIndicator = $(`
        <div class="chat-message bot typing-indicator">
            <div class="avatar bot-avatar" style="background-image: url('https://media.istockphoto.com/id/1333838449/vector/chatbot-icon-support-bot-cute-smiling-robot-with-headset-the-symbol-of-an-instant-response.jpg?s=612x612&w=0&k=20&c=sJ_uGp9wJ5SRsFYKPwb-dWQqkskfs7Fz5vCs2w5w950=');"></div>
            <div class="message" style="font-size: 14px;
                                color: rgba(0, 0, 0, 0.6); 
                                display: flex;
                                align-items: center;">
                ƒêang suy nghƒ© c√¢u tr·∫£ l·ªùi 
                <div class="time-count" style="margin-left: 5px; margin-right: 5px;">
                00:00</div>
                <span>.</span><span>.</span><span>.</span>
            </div>
        </div>
    `);
    $chatOutput.append($typingIndicator);
    $chatOutput.scrollTop($chatOutput.prop('scrollHeight'));

    // Kh·ªüi t·∫°o th·ªùi gian b·∫Øt ƒë·∫ßu
    const startTime = Date.now();

    // C·∫≠p nh·∫≠t s·ªë ph√∫t v√† gi√¢y trong "ƒêang suy nghƒ© c√¢u tr·∫£ l·ªùi"
    const updateTimeInterval = setInterval(() => {
        const elapsedTime = Math.floor((Date.now() - startTime) / 1000);
        const minutes = Math.floor(elapsedTime / 60);
        const seconds = elapsedTime % 60;
        const formattedTime = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        $typingIndicator.find('.time-count').text(formattedTime);
    }, 1000);

    // Th·ª≠ v·ªõi Gemini tr∆∞·ªõc
    $.ajax({
        url: 'http://127.0.0.1:8000/api/chat/chatbot-with-gemini',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ query: query }),
        success: function(data) {
            clearInterval(updateTimeInterval);
            $typingIndicator.remove();

            // N·∫øu flag ho·∫∑c n·ªôi dung tr·∫£ l·ªùi l√† ngo√†i ph·∫°m vi th√¨ chuy·ªÉn sang search web
            if (data.use_web_search || (typeof data.answer === 'string' && data.answer.trim() === OUT_OF_SCOPE_MESSAGE)) {
                searchWeb(query);
            } else {
                processResponse(data);
                saveMessage(currentSessionId, 'bot', data.answer, data.lst_Relevant_Documents);
                $chatOutput.scrollTop($chatOutput.prop('scrollHeight'));
                isLoading = false;
                updateSendButtonState();
                $('#loading-indicator').text("");
            }
        }
    });
}

// Th√™m h√†m m·ªõi ƒë·ªÉ x·ª≠ l√Ω t√¨m ki·∫øm web
function searchWeb(query) {
    const $chatOutput = $('#chat-output');
    
    // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt h·ª£p
    const $combinedMessage = $(`
        <div class="chat-message bot">
            <div class="avatar bot-avatar" style="background-image: url('https://media.istockphoto.com/id/1333838449/vector/chatbot-icon-support-bot-cute-smiling-robot-with-headset-the-symbol-of-an-instant-response.jpg?s=612x612&w=0&k=20&c=sJ_uGp9wJ5SRsFYKPwb-dWQqkskfs7Fz5vCs2w5w950=');"></div>
            <div class="message">
                <div class="transition-text" style="margin-bottom: 10px;">Xin l·ªói b·∫°n. Ki·∫øn th·ª©c n√†y n·∫±m ngo√†i ph·∫°m vi hi·ªÉu bi·∫øt c·ªßa t√¥i. T√¥i s·∫Ω ti·∫øn h√†nh t√¨m ki·∫øm th√¥ng qua k·∫øt qu·∫£ b√™n ngo√†i</div>
                <div class="searching-text" style="font-size: 14px; color: rgba(0, 0, 0, 0.6); display: flex; align-items: center;">
                    ƒêang t√¨m ki·∫øm th√¥ng tin t·ª´ web
                    <div class="time-count" style="margin-left: 5px; margin-right: 5px;">00:00</div>
                    <span>.</span><span>.</span><span>.</span>
                </div>
            </div>
        </div>
    `);
    $chatOutput.append($combinedMessage);
    $chatOutput.scrollTop($chatOutput.prop('scrollHeight'));

    // Kh·ªüi t·∫°o th·ªùi gian b·∫Øt ƒë·∫ßu
    const startTime = Date.now();

    // C·∫≠p nh·∫≠t s·ªë ph√∫t v√† gi√¢y
    const updateTimeInterval = setInterval(() => {
        const elapsedTime = Math.floor((Date.now() - startTime) / 1000);
        const minutes = Math.floor(elapsedTime / 60);
        const seconds = elapsedTime % 60;
        const formattedTime = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        $combinedMessage.find('.time-count').text(formattedTime);
    }, 1000);

    // G·ªçi API t√¨m ki·∫øm web
    $.ajax({
        url: 'http://127.0.0.1:8000/api/chat/chatbot-with-search-web',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ query: query }),
        success: function(data) {
            clearInterval(updateTimeInterval);
            $combinedMessage.remove();
            processResponse(data);
            saveMessage(currentSessionId, 'bot', data.answer, data.lst_Relevant_Documents);
            $chatOutput.scrollTop($chatOutput.prop('scrollHeight'));
            isLoading = false;
            updateSendButtonState();
            $('#loading-indicator').text("");
        }
    });
}

// H√†m x·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ chatbot ph·∫£n h·ªìi v√† l·∫•y ra tr√≠ch d·∫´n
function processResponse(data) {
    const { answer, lst_Relevant_Documents } = data;
    let formattedAnswer = "";
    // Thay th·∫ø t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p xu·ªëng d√≤ng: k√Ω t·ª± th·ª±c, '\n', '\n\n'
    formattedAnswer = answer
        .replace(/\\n\\n/g, "<br><br>")   // chu·ªói '\n\n' (2 d·∫•u backslash)
        .replace(/\\n/g, "<br>")           // chu·ªói '\n' (1 d·∫•u backslash)
        .replace(/\n\n/g, "<br><br>")      // k√Ω t·ª± xu·ªëng d√≤ng k√©p th·ª±c s·ª±
        .replace(/\n/g, "<br>");            // k√Ω t·ª± xu·ªëng d√≤ng ƒë∆°n th·ª±c s·ª±
    formattedAnswer = formattedAnswer.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    const $chatOutput = $('#chat-output');
    const $botMessage = $(`
        <div class="chat-message bot">
            <div class="avatar bot-avatar" style="background-image: url('https://media.istockphoto.com/id/1333838449/vector/chatbot-icon-support-bot-cute-smiling-robot-with-headset-the-symbol-of-an-instant-response.jpg?s=612x612&w=0&k=20&c=sJ_uGp9wJ5SRsFYKPwb-dWQqkskfs7Fz5vCs2w5w950=');"></div>
            <div class="message"></div>
        </div>
    `);
    $chatOutput.append($botMessage);
    typeMessage($botMessage.find(".message"), formattedAnswer, () => {
        // Hi·ªÉn th·ªã l·∫°i tr√≠ch d·∫´n d·∫°ng collapsible b√™n d∆∞·ªõi khung chat
        if (lst_Relevant_Documents && lst_Relevant_Documents.length > 0) {
            displayRelevantDocuments(lst_Relevant_Documents);
        } else {
            $('#relevant-documents-container').empty();
        }
        // X√≥a n√∫t n·ªïi n·∫øu c√≤n s√≥t l·∫°i
        $('#show-references-btn').remove();
        $('.references-overlay').remove();
    });
}

// H√†m cho chatbot in ra ph·∫£n h·ªìi cho user
function typeMessage($element, message, callback) {
    // T√°ch message th√†nh t·ª´ng t·ª´, nh∆∞ng v·∫´n gi·ªØ <br> l√† m·ªôt ph·∫ßn ri√™ng bi·ªát
    const parts = message.split(/(<br>)/g);
    let words = [];
    parts.forEach(part => {
        if (part === "<br>") {
            words.push("<br>");
        } else {
            // T√°ch t·ª´ng t·ª´, gi·ªØ nguy√™n HTML
            const splitWords = part.split(" ");
            splitWords.forEach((w, i) => {
                // ƒê·∫£m b·∫£o kh√¥ng th√™m t·ª´ r·ªóng cu·ªëi c√πng do split
                if (w !== "" || i < splitWords.length - 1) words.push(w);
            });
        }
    });

    let wordIndex = 0;
    isTyping = true;
    updateSendButtonState();

    const interval = setInterval(() => {
        if (wordIndex < words.length) {
            if (words[wordIndex] === "<br>") {
                $element.append("<br>");
            } else {
                // N·∫øu t·ª´ ti·∫øp theo l√† <br> ho·∫∑c l√† t·ª´ cu·ªëi, kh√¥ng th√™m d·∫•u c√°ch
                const addSpace = (wordIndex < words.length - 1 && words[wordIndex + 1] !== "<br>");
                $element.append(words[wordIndex] + (addSpace ? " " : ""));
            }
            wordIndex++;
            $element.parent().scrollTop($element.parent().prop('scrollHeight'));
        } else {
            clearInterval(interval);
            isTyping = false;
            updateSendButtonState();
            if (callback) callback();
        }
    }, 25);
}

// H√†m t·∫°o th·∫ª cho lst_Relevant_Documents
function displayRelevantDocuments(documents) {
    const container = $('#relevant-documents-container');
    container.empty(); // X√≥a c√°c th·∫ª c≈© n·∫øu c√≥

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tr√≠ch d·∫´n t·ªëi ƒëa l√† 5
    const maxReferences = 5;
    const displayDocs = documents.slice(0, maxReferences);
    const count = displayDocs.length;
    let badgeClass = '';
    if (count >= 5) badgeClass = 'red';
    else if (count >= 3) badgeClass = 'orange';
    else badgeClass = '';

    // T·∫°o header (d·∫°ng button) ƒë·ªÉ m·ªü modal
    const header = $(`
        <div class="references-collapsible-header" style="cursor:pointer;">
            <span class="references-collapsible-arrow">‚ñ∂</span>
            <span>Tr√≠ch d·∫´n tham kh·∫£o</span>
            <span class="references-collapsible-badge ${badgeClass}">${count}</span>
        </div>
    `);
    container.append(header);

    // Khi click header, hi·ªán modal overlay
    header.on('click', function() {
        showReferencesModal(displayDocs);
    });
}

// H√†m hi·ªán modal overlay ch·ª©a c√°c th·∫ª tr√≠ch d·∫´n
function showReferencesModal(documents) {
    // X√≥a overlay c≈© n·∫øu c√≥
    $('.references-modal-overlay').remove();
    const overlay = $(`
        <div class="references-modal-overlay">
            <div class="references-modal-popup">
                <div class="references-modal-title">üìë Tr√≠ch d·∫´n tham kh·∫£o (${documents.length})</div>
                <button class="references-modal-close" title="ƒê√≥ng">√ó</button>
                <div class="documents-wrapper"></div>
            </div>
        </div>
    `);
    // Th√™m c√°c th·∫ª tr√≠ch d·∫´n v√†o popup
    const documentsWrapper = overlay.find('.documents-wrapper');
    documents.forEach((doc, index) => {
        if (typeof doc === 'string' && doc.startsWith('http')) {
            const docElement = $(`
                <div class="relevant-document">
                    <span class="doc-icon">üîó</span>
                    <div class="doc-title">Link tham kh·∫£o</div>
                    <div class="doc-content"><a href="${doc}" target="_blank" rel="noopener noreferrer">${doc}</a></div>
                </div>`
            );
            documentsWrapper.append(docElement);
            return;
        }
        const parts = doc.split('<=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=>');
        if (parts.length > 1) {
            const contentPart = parts[1].trim();
            const metadataPart = parts[0].trim();
            const loaiVanBanMatch = metadataPart.match(/Lo·∫°i vƒÉn b·∫£n: (.*)/);
            const soHieuMatch = metadataPart.match(/S·ªë hi·ªáu: (.*)/);
            const loaiVanBan = loaiVanBanMatch ? loaiVanBanMatch[1] : "N/A";
            const soHieu = soHieuMatch ? soHieuMatch[1] : "N/A";
            const shortContent = contentPart.length > 40 ? contentPart.substring(0, 40) + '...' : contentPart;
            const docElement = $(`
                <div class="relevant-document" data-full-content="${doc}">
                    <span class="doc-icon">üìÑ</span>
                    <div class="doc-title">${loaiVanBan} ${soHieu}</div>
                    <div class="doc-content">${shortContent}</div>
                </div>`
            );
            docElement.on('click', function(e) {
                e.stopPropagation();
                const fullContent = $(this).data('full-content');
                openFullscreenDocument(fullContent);
            });
            documentsWrapper.append(docElement);
        }
    });
    // S·ª± ki·ªán ƒë√≥ng overlay
    overlay.find('.references-modal-close').on('click', function() {
        overlay.remove();
    });
    overlay.on('click', function(e) {
        if ($(e.target).is('.references-modal-overlay')) {
            overlay.remove();
        }
    });
    $('body').append(overlay);
}

// H√†m m·ªü n·ªôi dung ƒë·∫ßy ƒë·ªß khi click v√†o Tr√≠ch d·∫´n
function openFullscreenDocument(content) {
    // T√°ch ph·∫ßn metadata v√† ph·∫ßn n·ªôi dung
    const parts = content.split('<=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=>');
    let metadata = parts[0] || '';
    let mainContent = parts[1] || '';

    // X·ª≠ l√Ω metadata: ch·ªâ thay \n th√†nh <br>
    metadata = metadata.replace(/\n/g, "<br>");

    // X·ª≠ l√Ω mainContent:
    // 1. Thay \n th√†nh <br>
    mainContent = mainContent.replace(/\n/g, "<br>");
    // 2. Ch√®n <br> tr∆∞·ªõc m·ªçi s·ªë th·ª© t·ª± (1., 2., ...)
    mainContent = mainContent.replace(/(\d+\.\s)/g, '<br>$1');
    mainContent = mainContent.replace(/^<br>/, "");

    // Gh√©p l·∫°i
    let formattedContent = metadata + '<br><b><=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=></b><br>' + mainContent;

    const overlay = $(
        `<div class="fullscreen-overlay">
            <div class="fullscreen-document">
                <div class="document-content">${formattedContent}</div>
            </div>
        </div>`
    );

    overlay.on('click', function(e) {
        if ($(e.target).is('.fullscreen-overlay')) {
            overlay.remove();
        }
    });

    $('body').append(overlay);
}

// Bi·∫øn l∆∞u session ID hi·ªán t·∫°i
let currentSessionId = null;

// H√†m kh·ªüi t·∫°o session m·ªõi
function startNewSession() {
    $.ajax({
        url: 'http://127.0.0.1:8000/api/session/start-session',
        type: 'POST',
        contentType: 'application/json',
        success: function (response) {
            currentSessionId = response.session_id; // L∆∞u session ID
            localStorage.setItem('session_id', currentSessionId); // L∆∞u v√†o localStorage
            console.log("New session started with ID:", currentSessionId);

            // X√≥a khung chat v√† hi·ªÉn th·ªã tin nh·∫Øn m·∫∑c ƒë·ªãnh
            $('#chat-output').empty();
            $('#relevant-documents-container').empty();
            const defaultMessage = `
                <div class="chat-message bot">
                    <div class="avatar bot-avatar" style="background-image: url('https://media.istockphoto.com/id/1333838449/vector/chatbot-icon-support-bot-cute-smiling-robot-with-headset-the-symbol-of-an-instant-response.jpg?s=612x612&w=0&k=20&c=sJ_uGp9wJ5SRsFYKPwb-dWQqkskfs7Fz5vCs2w5w950=');"></div>
                    <div class="message">Xin ch√†o B·∫°n, T√¥i l√† m·ªôt tr·ª£ l√Ω chuy√™n h·ªó tr·ª£ v·ªÅ ph√°p lu·∫≠t Vi·ªát Nam. B·∫°n c√≥ c√¢u h·ªèi g√¨ xin ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi T√¥i nh√©!</div>
                </div>
            `;
            $('#chat-output').append(defaultMessage);
            // Reset v·ªÅ ch·∫ø ƒë·ªô chat th∆∞·ªùng khi new chat
            isSearchWebMode = false;
            $('#toggle-search-web').removeClass('active').find('span').text('Chat');
            $('#user-query').attr('placeholder', 'Nh·∫≠p tin nh·∫Øn ...');
            updateSearchWebButtonState(); // Enable Search Web button
        },
        error: function () {
            alert("Error: Unable to start new session.");
        }
    });
}

// H√†m x·ª≠ l√Ω khi user click New Chat
$('#new-chat').on('click', function (event) {
    event.preventDefault();
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫Øt ƒë·∫ßu m·ªôt phi√™n tr√≤ chuy·ªán m·ªõi?")) {
        localStorage.removeItem('session_id'); // X√≥a session ID c≈©
        startNewSession(); // T·∫°o session m·ªõi

        const $inputArea = $('#user-query');  // S·ª≠ d·ª•ng id 'user-query' thay v√¨ class 'input-area'
        // V√¥ hi·ªáu h√≥a input v√† thay ƒë·ªïi placeholder
        $inputArea.prop('disabled', false);  // V√¥ hi·ªáu h√≥a input
        $inputArea.attr('placeholder', 'Nh·∫≠p tin nh·∫Øn ...');  // Thay ƒë·ªïi placeholder

        loadChatSessions(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch phi√™n chat

        // V√¥ hi·ªáu h√≥a Clear Chat khi b·∫Øt ƒë·∫ßu m·ªôt chat m·ªõi
        $clearChatButton.removeClass('active').addClass('disabled').prop('disabled', true);
    }
});

// H√†m l∆∞u tin nh·∫Øn v√†o database
function saveMessage(sessionId, sender, message, references = null) {
    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p references l√† chu·ªói r·ªóng
    if (references === "") {
        references = [];
    }
    
    $.ajax({
        url: 'http://127.0.0.1:8000/api/session/save-message',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            session_id: sessionId,
            sender: sender,
            message: message,
            references: references
        }),
        success: function(response) {
            console.log("Message saved:", response);
        },
        error: function(xhr) {
            console.error("Error saving message:", xhr.responseText);
        }
    });
}

// H√†m load danh s√°ch c√°c phi√™n chat c≈©
function loadChatSessions() {
    $.ajax({
        url: 'http://127.0.0.1:8000/api/session/get-sessions',
        type: 'GET',
        contentType: 'application/json',
        success: function(response) {
            const sessions = response.sessions;
            const $chatSessions = $('#chat-sessions');
            $chatSessions.empty(); // X√≥a n·ªôi dung c≈©

            sessions.forEach(session => {
                const firstMessage = session.first_message || "No message yet";
                const truncatedMessage = firstMessage.length > 30 
                    ? firstMessage.substring(0, 30) + "..." 
                    : firstMessage;

                // Th√™m icon ba ch·∫•m v√† menu Delete
                const sessionElement = $(
                    `<div class="chat-session" data-session-id="${session.id}">
                        <div class="chat-session-content">${truncatedMessage}</div>
                        <div class="session-menu-trigger">‚ãØ</div>
                        <div class="session-menu">
                            <div class="session-menu-item delete-session">
                                <svg class="delete-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" viewBox="0 0 24 24"><path fill="#d00" d="M9 3a3 3 0 0 1 6 0h5a1 1 0 1 1 0 2h-1v15a3 3 0 0 1-3 3H8a3 3 0 0 1-3-3V5H4a1 1 0 1 1 0-2h5Zm8 2H7v15a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V5Zm-5 3a1 1 0 0 1 1 1v8a1 1 0 1 1-2 0V9a1 1 0 0 1 1-1Zm4 1a1 1 0 0 1 2 0v8a1 1 0 1 1-2 0V9Zm-8 0a1 1 0 0 1 2 0v8a1 1 0 1 1-2 0V9Z"/></svg>
                                Delete
                            </div>
                        </div>
                    </div>`
                );

                // G·∫Øn s·ª± ki·ªán click ƒë·ªÉ load l·ªãch s·ª≠ chat cho to√†n b·ªô th·∫ª (tr·ª´ icon ba ch·∫•m v√† menu)
                sessionElement.on('click', function(e) {
                    // N·∫øu click v√†o menu ho·∫∑c icon ba ch·∫•m th√¨ kh√¥ng load
                    if ($(e.target).hasClass('session-menu-trigger') || $(e.target).closest('.session-menu').length) return;
                    loadChatHistory(session.id);
                });

                // Hi·ªán menu khi click v√†o ba ch·∫•m
                sessionElement.find('.session-menu-trigger').on('click', function(e) {
                    e.stopPropagation();
                    const $menu = $(this).siblings('.session-menu');
                    // N·∫øu menu ƒëang hi·ªán, ·∫©n n√≥ ƒëi. N·∫øu ƒëang ·∫©n, ·∫©n t·∫•t c·∫£ menu kh√°c v√† hi·ªán menu n√†y.
                    if ($menu.is(':visible')) {
                        $menu.hide();
                    } else {
                        $('.session-menu').hide();
                        $menu.show();
                    }
                });

                // ·∫®n menu khi click ra ngo√†i
                $(document).on('click', function() {
                    $('.session-menu').hide();
                });

                // X·ª≠ l√Ω x√≥a phi√™n chat
                sessionElement.find('.delete-session').on('click', function(e) {
                    e.stopPropagation();
                    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a phi√™n chat n√†y?')) {
                        const sessionId = session.id;
                        deleteChatSession(sessionId); // G·ªçi h√†m x√≥a phi√™n chat
                        sessionElement.remove(); // X√≥a kh·ªèi giao di·ªán
                    }
                });

                $chatSessions.append(sessionElement);
            });
        },
        error: function() {
            console.error("Error fetching chat sessions");
        }
    });
}

// Logic event khi load l·∫°i web th√¨ s·∫Ω load danh s√°ch c√°c phi√™n chat c≈©
$(document).ready(function() {
    const $inputArea = $('#user-query');  // S·ª≠ d·ª•ng id 'user-query' thay v√¨ class 'input-area'
    // V√¥ hi·ªáu h√≥a input v√† thay ƒë·ªïi placeholder
    $inputArea.prop('disabled', true);  // V√¥ hi·ªáu h√≥a input
    $inputArea.attr('placeholder', 'Click "Bi·ªÉu t∆∞·ª£ng b√∫t" ƒë·ªÉ b·∫Øt ƒë·∫ßu m·ªôt phi√™n tr√≤ chuy·ªán m·ªõi!');  // Thay ƒë·ªïi placeholder
});


// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa n√∫t Clear Chat
function updateClearChatButtonState() {
    // Ki·ªÉm tra n·∫øu c√≥ tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng trong chat-output
    const userMessagesExist = $chatOutput.find('.chat-message.user').length > 0;
    
    // N·∫øu c√≥ tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng, b·∫≠t n√∫t Clear Chat
    if (userMessagesExist) {
        $clearChatButton.removeClass('disabled').addClass('active').prop('disabled', false);
    } else {
        $clearChatButton.removeClass('active').addClass('disabled').prop('disabled', true);
    }
}

// L·∫Øng nghe s·ª± ki·ªán click v√†o m·ªôt phi√™n chat t·ª´ sidebar
$('.chat-session').on('click', function() {
    // Khi ng∆∞·ªùi d√πng click v√†o phi√™n chat, b·∫≠t n√∫t Clear Chat n·∫øu c√≥ tin nh·∫Øn
    updateClearChatButtonState();
});

// H√†m load t√†i li·ªáu tham kh·∫£o cho m·ªôt tin nh·∫Øn
function loadMessageReferences(messageId) {
    // X√≥a class selected t·ª´ t·∫•t c·∫£ tin nh·∫Øn bot
    $('.chat-message.bot').removeClass('selected');
    
    // Th√™m class selected cho tin nh·∫Øn ƒë∆∞·ª£c click
    $(`.chat-message.bot[data-message-id="${messageId}"]`).addClass('selected');

    $.ajax({
        url: `http://127.0.0.1:8000/api/session/get-message-references/${messageId}`,
        type: 'GET',
        contentType: 'application/json',
        success: function(response) {
            if (response.references && response.references.length > 0) {
                displayRelevantDocuments(response.references);
            } else {
                $('#relevant-documents-container').empty();
            }
        },
        error: function() {
            console.error("Error loading message references.");
        }
    });
}

// H√†m load l·∫°i l·ªãch s·ª≠ chat c·ªßa m·ªôt phi√™n
function loadChatHistory(sessionId) {
    console.log("Loading chat history for session ID:", sessionId);

    // X√≥a ph·∫ßn tr√≠ch d·∫´n tham kh·∫£o khi load l·ªãch s·ª≠ chat
    $('#relevant-documents-container').empty();

    // X√≥a class selected t·ª´ t·∫•t c·∫£ c√°c phi√™n chat v√† tin nh·∫Øn bot
    $('.chat-session').removeClass('selected');
    $('.chat-message.bot').removeClass('selected');
    
    // Th√™m class selected cho phi√™n chat ƒë∆∞·ª£c ch·ªçn
    $(`.chat-session[data-session-id="${sessionId}"]`).addClass('selected');

    // G·ªçi API ƒë·ªÉ l·∫•y l·ªãch s·ª≠ chat
    $.ajax({
        url: `http://127.0.0.1:8000/api/session/get-chat-history/${sessionId}`,
        type: 'GET',
        contentType: 'application/json',
        success: function (response) {
            const chatHistory = response.chat_history;
            const $chatOutput = $('#chat-output');
            $chatOutput.empty();

            // Duy·ªát qua l·ªãch s·ª≠ chat v√† hi·ªÉn th·ªã t·ª´ng tin nh·∫Øn
            chatHistory.forEach(chat => {
                const isBot = chat.sender === 'bot';
                
                let formattedMessage = chat.message
                    .replace(/\\n\\n/g, "<br><br>")
                    .replace(/\\n/g, "<br>")
                    .replace(/\n\n/g, "<br><br>")
                    .replace(/\n/g, "<br>")
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

                const messageHtml = `
                    <div class="chat-message ${isBot ? 'bot' : 'user'}" data-message-id="${chat.id}">
                        <div class="avatar ${isBot ? 'bot-avatar' : 'user-avatar'}" 
                             style="background-image: url('${isBot ? 'https://media.istockphoto.com/id/1333838449/vector/chatbot-icon-support-bot-cute-smiling-robot-with-headset-the-symbol-of-an-instant-response.jpg?s=612x612&w=0&k=20&c=sJ_uGp9wJ5SRsFYKPwb-dWQqkskfs7Fz5vCs2w5w950=' : 'https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o='}');">
                        </div>
                        <div class="message">${formattedMessage}</div>
                    </div>
                `;
                $chatOutput.append(messageHtml);
            });

            // Th√™m s·ª± ki·ªán click cho tin nh·∫Øn c·ªßa bot
            $('.chat-message.bot').on('click', function() {
                const messageId = $(this).data('message-id');
                loadMessageReferences(messageId);
            });

            const $inputArea = $('#user-query');
            $inputArea.prop('disabled', false);
            $inputArea.attr('placeholder', 'Nh·∫≠p tin nh·∫Øn ...');

            updateClearChatButtonState();

            currentSessionId = sessionId;
            localStorage.setItem('session_id', sessionId);
            updateSearchWebButtonState(); // Enable Search Web button
        },
        error: function () {
            console.error("Error loading chat history.");
        }
    });
}

// H√†m add phi√™n chat hi·ªán t·∫°i v√†o sidebar ngay sau khi user g·ª≠i tin nh·∫Øn
function addChatSessionToSidebar(sessionId, firstMessage) {
    const $chatSessions = $('#chat-sessions');
    const truncatedMessage = firstMessage.length > 30 
        ? firstMessage.substring(0, 30) + "..." 
        : firstMessage;

    const sessionElement = $(`
        <div class="chat-session" data-session-id="${sessionId}">
            <div class="chat-session-content">${truncatedMessage}</div>
        </div>
    `);

    // G·∫Øn s·ª± ki·ªán click v√†o phi√™n chat m·ªõi
    sessionElement.on('click', function() {
        loadChatHistory(sessionId);
    });

    // Th√™m phi√™n chat m·ªõi v√†o ƒë·∫ßu danh s√°ch
    $chatSessions.prepend(sessionElement);
}

// L·∫•y ƒë·ªëi t∆∞·ª£ng c·ªßa n√∫t Clear Chat v√† chat-output
const $clearChatButton = $('#clear-chat');
const $chatOutput = $('#chat-output');

// L·∫Øng nghe s·ª± ki·ªán click v√†o n√∫t Clear Chat
$clearChatButton.on('click', function() {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a phi√™n Chat n√†y?")) {
        // X√≥a chat ·ªü frontend
        clearChatHistory();

        const $inputArea = $('#user-query');  // S·ª≠ d·ª•ng id 'user-query' thay v√¨ class 'input-area'
        // V√¥ hi·ªáu h√≥a input v√† thay ƒë·ªïi placeholder
        $inputArea.prop('disabled', true);  // V√¥ hi·ªáu h√≥a input
        $inputArea.attr('placeholder', 'Click "ƒêo·∫°n Chat M·ªõi" ƒë·ªÉ b·∫Øt ƒë·∫ßu m·ªôt phi√™n tr√≤ chuy·ªán m·ªõi!');  // Thay ƒë·ªïi placeholder

        // G·ª≠i y√™u c·∫ßu ƒë·∫øn backend ƒë·ªÉ x√≥a chat
        deleteChatSession(currentSessionId);
    }
});

// H√†m x√≥a to√†n b·ªô l·ªãch s·ª≠ chat trong giao di·ªán
function clearChatHistory() {
    $chatOutput.empty();
    $('#relevant-documents-container').empty();
    updateClearChatButtonState(); // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i c·ªßa n√∫t Clear Chat
}

// H√†m g·ª≠i y√™u c·∫ßu x√≥a chat t·ªõi backend
function deleteChatSession(sessionId) {
    $.ajax({
        url: `http://127.0.0.1:8000/api/session/delete-session/${sessionId}`,
        type: 'DELETE',
        contentType: 'application/json',
        success: function(response) {
            console.log('Session deleted successfully');
            // C·∫≠p nh·∫≠t l·∫°i danh s√°ch c√°c phi√™n chat trong sidebar
            loadChatSessions();
            // N·∫øu ƒëang ·ªü phi√™n chat b·ªã x√≥a th√¨ clear chat v√† disable input
            if (currentSessionId === sessionId) {
                $('#chat-output').empty();
                $('#relevant-documents-container').empty();
                const $inputArea = $('#user-query');
                $inputArea.prop('disabled', true);
                $inputArea.attr('placeholder', 'Click "ƒêo·∫°n Chat M·ªõi" ƒë·ªÉ b·∫Øt ƒë·∫ßu m·ªôt phi√™n tr√≤ chuy·ªán m·ªõi!');
                $('#send-button').prop('disabled', true).removeClass('active').addClass('disabled');
            }
        },
        error: function() {
            console.error("Error deleting session.");
        }
    });
}

// H√†m t·∫°o/hi·ªán n√∫t n·ªïi xem tr√≠ch d·∫´n
function showReferencesButton(documents) {
    // X√≥a n√∫t c≈© n·∫øu c√≥
    $('#show-references-btn').remove();
    if (!documents || documents.length === 0) return;
    // T·∫°o n√∫t n·ªïi
    const btn = $(`
        <button id="show-references-btn" class="highlight" title="Xem tr√≠ch d·∫´n tham kh·∫£o">
            üìë Tr√≠ch d·∫´n
            <span class="badge">${documents.length}</span>
        </button>
    `);
    $('body').append(btn);
    // Hi·ªáu ·ª©ng n·ªïi b·∫≠t trong 2s ƒë·∫ßu
    setTimeout(() => btn.removeClass('highlight'), 2000);
    // S·ª± ki·ªán click ƒë·ªÉ m·ªü overlay
    btn.on('click', function() {
        showReferencesOverlay(documents);
    });
}

// H√†m hi·ªán overlay pop-up ch·ª©a c√°c th·∫ª tr√≠ch d·∫´n
function showReferencesOverlay(documents) {
    // X√≥a overlay c≈© n·∫øu c√≥
    $('.references-overlay').remove();
    // T·∫°o overlay
    const overlay = $(`
        <div class="references-overlay">
            <div class="references-popup">
                <div class="references-popup-title">üìë Tr√≠ch d·∫´n tham kh·∫£o (${documents.length})</div>
                <button class="references-popup-close" title="ƒê√≥ng">√ó</button>
                <div class="documents-wrapper"></div>
            </div>
        </div>
    `);
    // Th√™m c√°c th·∫ª tr√≠ch d·∫´n v√†o popup
    const documentsWrapper = overlay.find('.documents-wrapper');
    documents.forEach((doc, index) => {
        if (typeof doc === 'string' && doc.startsWith('http')) {
            const docElement = $(`
                <div class="relevant-document">
                    <span class="doc-icon">üîó</span>
                    <div class="doc-title">Link tham kh·∫£o</div>
                    <div class="doc-content"><a href="${doc}" target="_blank" rel="noopener noreferrer">${doc}</a></div>
                </div>`
            );
            documentsWrapper.append(docElement);
            return;
        }
        const parts = doc.split('<=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=>');
        if (parts.length > 1) {
            const contentPart = parts[1].trim();
            const metadataPart = parts[0].trim();
            const loaiVanBanMatch = metadataPart.match(/Lo·∫°i vƒÉn b·∫£n: (.*)/);
            const soHieuMatch = metadataPart.match(/S·ªë hi·ªáu: (.*)/);
            const loaiVanBan = loaiVanBanMatch ? loaiVanBanMatch[1] : "N/A";
            const soHieu = soHieuMatch ? soHieuMatch[1] : "N/A";
            const shortContent = contentPart.length > 40 ? contentPart.substring(0, 40) + '...' : contentPart;
            const docElement = $(`
                <div class="relevant-document" data-full-content="${doc}">
                    <span class="doc-icon">üìÑ</span>
                    <div class="doc-title">${loaiVanBan} ${soHieu}</div>
                    <div class="doc-content">${shortContent}</div>
                </div>`
            );
            docElement.on('click', function(e) {
                e.stopPropagation();
                const fullContent = $(this).data('full-content');
                openFullscreenDocument(fullContent);
            });
            documentsWrapper.append(docElement);
        }
    });
    // S·ª± ki·ªán ƒë√≥ng overlay
    overlay.find('.references-popup-close').on('click', function() {
        overlay.remove();
    });
    overlay.on('click', function(e) {
        if ($(e.target).is('.references-overlay')) {
            overlay.remove();
        }
    });
    $('body').append(overlay);
}